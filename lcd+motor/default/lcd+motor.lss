
lcd+motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000002f8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004c7  00000000  00000000  00000425  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015c  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004c6  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010f  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002a9  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
 	lcd_command(0x06);    // enter mode/ auto increment mode//
	lcd_command(0x0c);    // display on cursor off
}
void lcd_command(unsigned char com)              //com=command to be used/user defined function//com=0x02
	{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	28 bb       	out	0x18, r18	; 24
	lcd = com & 0xF0;		//send higher bit/D4-D7/data pin

	lcd &= ~(1<<rs); 		//rs =0/compliment 0f 0=1/command mode
  98:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1/en=enable,
  9a:	c3 9a       	sbi	0x18, 3	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	20 ed       	ldi	r18, 0xD0	; 208
  9e:	37 e0       	ldi	r19, 0x07	; 7
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_command+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0/forsending higher bit
  a6:	c3 98       	cbi	0x18, 3	; 24
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0x18>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;	//send lower bit
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	4a 95       	dec	r20
  b8:	e1 f7       	brne	.-8      	; 0xb2 <lcd_command+0x20>
  ba:	88 bb       	out	0x18, r24	; 24

	lcd &= ~(1<<rs); 		//rs =0
  bc:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  be:	c3 9a       	sbi	0x18, 3	; 24
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  c6:	c3 98       	cbi	0x18, 3	; 24
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_command+0x38>
	_delay_ms(1);
	}
  ce:	08 95       	ret

000000d0 <lcd_init>:
#define D6 PB6
#define D7 PB7


void lcd_init()
{
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);    // home position/test cursor wiill set on initial position
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 	lcd_command(0x06);    // enter mode/ auto increment mode//
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0c);    // display on cursor off
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  f0:	08 95       	ret

000000f2 <lcd_data>:
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
	_delay_ms(1);
	}
void lcd_data(unsigned char value)
	{
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	28 bb       	out	0x18, r18	; 24

	lcd =value & 0xF0;		//send higher bit

	lcd |= (1<<rs); 		//rs =1
  f8:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	20 ed       	ldi	r18, 0xD0	; 208
  fe:	37 e0       	ldi	r19, 0x07	; 7
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 106:	c3 98       	cbi	0x18, 3	; 24
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_data+0x18>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	//send lower bit
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_data+0x20>
 11a:	88 bb       	out	0x18, r24	; 24

	lcd |= (1<<rs); 		//rs =1
 11c:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
 11e:	c3 9a       	sbi	0x18, 3	; 24
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_data+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 126:	c3 98       	cbi	0x18, 3	; 24
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_data+0x38>
	_delay_ms(1);
	}
 12e:	08 95       	ret

00000130 <lcd_clear>:


void lcd_clear(void)
{
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_clear+0xa>
lcd_command(0x01);//predifined to clear lcd command
_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <lcd_string>:



void lcd_string(char *str)//pointer
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <lcd_string+0x12>
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	i++;
 150:	1f 5f       	subi	r17, 0xFF	; 255


void lcd_string(char *str)//pointer
{
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
 152:	fe 01       	movw	r30, r28
 154:	e1 0f       	add	r30, r17
 156:	f1 1d       	adc	r31, r1
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	b9 f7       	brne	.-18     	; 0x14c <lcd_string+0xc>
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
	i++;
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <lcd_number>:

void lcd_number(unsigned int value)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	unsigned int d=0;
	lcd_command(0x04);	//auto decrement mode
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>

	if(value==0)
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	91 f4       	brne	.+36     	; 0x19a <lcd_number+0x34>
	lcd_data(value+48);
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 17c:	0e c0       	rjmp	.+28     	; 0x19a <lcd_number+0x34>

	while(value!=0)
	{
	d=value%10;
	lcd_data(d+48);
 17e:	ce 01       	movw	r24, r28
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 66 01 	call	0x2cc	; 0x2cc <__udivmodhi4>
 188:	80 5d       	subi	r24, 0xD0	; 208
 18a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	value=value/10;
 18e:	ce 01       	movw	r24, r28
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 66 01 	call	0x2cc	; 0x2cc <__udivmodhi4>
 198:	eb 01       	movw	r28, r22
	lcd_command(0x04);	//auto decrement mode

	if(value==0)
	lcd_data(value+48);

	while(value!=0)
 19a:	20 97       	sbiw	r28, 0x00	; 0
 19c:	81 f7       	brne	.-32     	; 0x17e <lcd_number+0x18>
	{
	d=value%10;
	lcd_data(d+48);
	value=value/10;
	}
	lcd_command(0x06);	//auto increment mode
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <main>:
#include<avr/io.h>
#define F_CPU 8000000
#include<util/delay.h>
#include<lcdavr.h>
void main()
{
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
   DDRB=0xff;
 1b6:	1f ef       	ldi	r17, 0xFF	; 255
 1b8:	17 bb       	out	0x17, r17	; 23
   lcd_init();
 1ba:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_init>
   DDRC=0xff;
 1be:	14 bb       	out	0x14, r17	; 20
   DDRA=0x00;
 1c0:	1a ba       	out	0x1a, r1	; 26
   PORTA=0b11110000;
 1c2:	80 ef       	ldi	r24, 0xF0	; 240
 1c4:	8b bb       	out	0x1b, r24	; 27
        { lcd_clear();
	     lcd_command(0x80);
	     lcd_string("forward");
	      lcd_command(0xc0);
	      lcd_string(" direction");
            PORTC=0b10100000;
 1c6:	70 ea       	ldi	r23, 0xA0	; 160
 1c8:	e7 2e       	mov	r14, r23
 1ca:	c8 ec       	ldi	r28, 0xC8	; 200
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
		  {
		      lcd_command(0x80);
			  lcd_string("backward");
             lcd_command(0xc0);
	          lcd_string(" direction");
			  PORTC=0b01010000;
 1ce:	60 e5       	ldi	r22, 0x50	; 80
 1d0:	f6 2e       	mov	r15, r22
                       {
					        lcd_command(0x80);
                             lcd_string("right");
							  lcd_command(0xc0);
	                       lcd_string(" direction");
						   PORTC=0b10010000;
 1d2:	00 e9       	ldi	r16, 0x90	; 144
					   {
					         lcd_command(0x80);
							 lcd_string("left");
                              lcd_command(0xc0);
	                              lcd_string(" direction");
								  PORTC=0b01100000;
 1d4:	10 e6       	ldi	r17, 0x60	; 96
   DDRC=0xff;
   DDRA=0x00;
   PORTA=0b11110000;

   while(1)
   {   if((PINA & 0b11110000)==0b01110000) //switch 1 closed
 1d6:	89 b3       	in	r24, 0x19	; 25
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	80 37       	cpi	r24, 0x70	; 112
 1dc:	c9 f4       	brne	.+50     	; 0x210 <main+0x66>
        { lcd_clear();
 1de:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
	     lcd_command(0x80);
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	     lcd_string("forward");
 1e8:	80 e6       	ldi	r24, 0x60	; 96
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
	      lcd_command(0xc0);
 1f0:	80 ec       	ldi	r24, 0xC0	; 192
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	      lcd_string(" direction");
 1f6:	88 e6       	ldi	r24, 0x68	; 104
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
            PORTC=0b10100000;
 1fe:	e5 ba       	out	0x15, r14	; 21
 200:	80 ed       	ldi	r24, 0xD0	; 208
 202:	97 e0       	ldi	r25, 0x07	; 7
 204:	fe 01       	movw	r30, r28
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x5c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x5a>
 20e:	02 c0       	rjmp	.+4      	; 0x214 <main+0x6a>
	        _delay_ms(200);}
			else
			 lcd_clear();
 210:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
			 PORTC=0x00;
 214:	15 ba       	out	0x15, r1	; 21

          if((PINA & 0b11110000)==0b10110000)  //switch 2 closed
 216:	89 b3       	in	r24, 0x19	; 25
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	80 3b       	cpi	r24, 0xB0	; 176
 21c:	b9 f4       	brne	.+46     	; 0x24c <main+0xa2>
		  {
		      lcd_command(0x80);
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
			  lcd_string("backward");
 224:	83 e7       	ldi	r24, 0x73	; 115
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
             lcd_command(0xc0);
 22c:	80 ec       	ldi	r24, 0xC0	; 192
 22e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	          lcd_string(" direction");
 232:	88 e6       	ldi	r24, 0x68	; 104
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
			  PORTC=0b01010000;
 23a:	f5 ba       	out	0x15, r15	; 21
 23c:	80 ed       	ldi	r24, 0xD0	; 208
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	fe 01       	movw	r30, r28
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 246:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 248:	d9 f7       	brne	.-10     	; 0x240 <main+0x96>
 24a:	02 c0       	rjmp	.+4      	; 0x250 <main+0xa6>
			  _delay_ms(200);
			  }
			  else
			  lcd_clear();
 24c:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
			  PORTC=0x00;
 250:	15 ba       	out	0x15, r1	; 21
                
				if((PINA & 0b11110000)==0b11010000)  // switch 1 is closed
 252:	89 b3       	in	r24, 0x19	; 25
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	80 3d       	cpi	r24, 0xD0	; 208
 258:	b9 f4       	brne	.+46     	; 0x288 <main+0xde>
                       {
					        lcd_command(0x80);
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
                             lcd_string("right");
 260:	8c e7       	ldi	r24, 0x7C	; 124
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
							  lcd_command(0xc0);
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	                       lcd_string(" direction");
 26e:	88 e6       	ldi	r24, 0x68	; 104
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
						   PORTC=0b10010000;
 276:	05 bb       	out	0x15, r16	; 21
 278:	80 ed       	ldi	r24, 0xD0	; 208
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	fe 01       	movw	r30, r28
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0xd2>
 286:	02 c0       	rjmp	.+4      	; 0x28c <main+0xe2>
						   _delay_ms(200);
						   }
						   else
						   lcd_clear();
 288:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
						   PORTC=0x00;
 28c:	15 ba       	out	0x15, r1	; 21

                    if((PINA & 0b11110000)==0b11100000)  //switch 4 is closed
 28e:	89 b3       	in	r24, 0x19	; 25
 290:	80 7f       	andi	r24, 0xF0	; 240
 292:	80 3e       	cpi	r24, 0xE0	; 224
 294:	b9 f4       	brne	.+46     	; 0x2c4 <main+0x11a>
					   {
					         lcd_command(0x80);
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
							 lcd_string("left");
 29c:	82 e8       	ldi	r24, 0x82	; 130
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
                              lcd_command(0xc0);
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	                              lcd_string(" direction");
 2aa:	88 e6       	ldi	r24, 0x68	; 104
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
								  PORTC=0b01100000;
 2b2:	15 bb       	out	0x15, r17	; 21
 2b4:	80 ed       	ldi	r24, 0xD0	; 208
 2b6:	97 e0       	ldi	r25, 0x07	; 7
 2b8:	fe 01       	movw	r30, r28
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <main+0x10e>
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <main+0x11e>
								  _delay_ms(200);
								  }

								  else
								  lcd_clear();
 2c4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_clear>
								  PORTC=0x00;
 2c8:	15 ba       	out	0x15, r1	; 21
 2ca:	85 cf       	rjmp	.-246    	; 0x1d6 <main+0x2c>

000002cc <__udivmodhi4>:
 2cc:	aa 1b       	sub	r26, r26
 2ce:	bb 1b       	sub	r27, r27
 2d0:	51 e1       	ldi	r21, 0x11	; 17
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <__udivmodhi4_ep>

000002d4 <__udivmodhi4_loop>:
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	a6 17       	cp	r26, r22
 2da:	b7 07       	cpc	r27, r23
 2dc:	10 f0       	brcs	.+4      	; 0x2e2 <__udivmodhi4_ep>
 2de:	a6 1b       	sub	r26, r22
 2e0:	b7 0b       	sbc	r27, r23

000002e2 <__udivmodhi4_ep>:
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	5a 95       	dec	r21
 2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__udivmodhi4_loop>
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
